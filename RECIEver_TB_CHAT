LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY Sci_RX_tb IS
END Sci_RX_tb;

ARCHITECTURE testbench OF Sci_RX_tb IS 

    -- Component Declaration for the Unit Under Test (UUT)
    COMPONENT Sci_RX
    PORT(
        clk : in STD_Logic;
        rx : in std_logic;
        sci_ready : out std_logic;
        sci_output : out std_logic_vector(7 downto 0));
    END COMPONENT;
    
    --Inputs
    signal clk : std_logic := '0';
    signal rx : std_logic := '1';

    --Outputs
    signal sci_output      : std_logic_vector(7 downto 0);
    signal sci_ready       : std_logic;

    -- Clock period definitions
    constant clk_period : time := 100 ns; -- 10 MHz

BEGIN

    -- Instantiate the Unit Under Test (UUT)
    uut: Sci_RX PORT MAP (
        rx => rx,
        sci_output => sci_output, 
        sci_ready => sci_ready, 
        clk => clk);

    -- Clock process definitions
    clk_process :process
    begin
        clk <= '0';
        wait for clk_period/2;
        clk <= '1';
        wait for clk_period/2;
    end process;

    -- Stimulus process
    stim_proc: process
    begin        
        -- Test Case 1: Single character received correctly
        wait for 100 ns; -- Initial delay
        rx <= '0'; 
        wait for clk_period * 392; -- Wait for one baud period
        rx <= '1'; 
        wait for clk_period * 3 * 392; -- Wait for 3 baud periods
        assert(sci_ready = '1') report "Test Case 1 failed: sci_ready not asserted after receiving a character." severity error;
        assert(sci_output = "00000000") report "Test Case 1 failed: Incorrect sci_output value after receiving a character." severity error;
        
        -- Test Case 2: Multiple characters received correctly
        wait for 100 ns; -- Initial delay
        rx <= '0'; 
        wait for clk_period * 392; -- Wait for one baud period
        rx <= '1'; 
        wait for clk_period * 3 * 392; -- Wait for 3 baud periods
        assert(sci_ready = '1') report "Test Case 2 failed: sci_ready not asserted after receiving first character." severity error;
        assert(sci_output = "00000000") report "Test Case 2 failed: Incorrect sci_output value after receiving first character." severity error;
        rx <= '0'; 
        wait for clk_period * 2 * 392; -- Wait for 2 baud periods
        rx <= '1'; 
        wait for clk_period * 3 * 392; -- Wait for 3 baud periods
        assert(sci_ready = '1') report "Test Case 2 failed: sci_ready not asserted after receiving second character." severity error;
        assert(sci_output = "00000000") report "Test Case 2 failed: Incorrect sci_output value after receiving second character." severity error;
        
        -- Test Case 3: Invalid character received
        wait for 100 ns; -- Initial delay
        rx <= '1'; 
        wait for clk_period * 392; -- Wait for one baud period
        rx <= '0'; 
        wait for clk_period * 3 * 392; -- Wait for 3 baud periods
        assert(sci_ready = '0') report "Test Case 3 failed: sci_ready incorrectly asserted after receiving invalid character." severity error;
        assert(sci_output = "00000000") report "Test Case 3 failed: Incorrect sci_output value after receiving invalid character." severity error;
        
        -- Test Case 4: Continuous stream of characters
        wait for 100 ns; -- Initial delay
        for i in 0 to 9 loop
            rx <= '0'; 
            wait for clk_period * 392; -- Wait for one baud period
            rx <= '1'; 
            wait for clk_period * 3 * 392; -- Wait for 3 baud periods
            assert(sci_ready = '1') report "Test Case 4 failed: sci_ready not asserted in iteration " & integer'image(i) severity error;
            assert(sci_output = "00000000") report "Test Case 4 failed: Incorrect sci_output value in iteration " & integer'image(i) severity error;
        end loop;
        
        -- Additional Test Cases can be added here
        
        wait;
        
    end process;

END testbench;
